alias r="cha && source $ZDOTDIR/.zshrc"

# ls
alias l="exa -1F --group-directories-first --icons"
alias ls="exa -F --group-directories-first --icons"
alias la="l -a"
alias ll="l -l --git"
alias lla="ll -a"

# chezmoi
alias ch="chezmoi"
alias cha="chezmoi apply"
alias chd="chezmoi diff"
alias zedit="chezmoi edit $ZDOTDIR/.zshrc --apply"
alias cdc="chezmoi cd"

# dirs
alias mkdir="mkdir -p"
alias ..="cd .."
alias ...="cd ../.."
alias zz="cd $ZDOTDIR"
alias sizes='du -hd1 | sort -hr'

# Play safe!
alias 'rm=rm -i'
alias 'mv=mv -i'
alias 'cp=cp -i'

# history
alias h="history -i -50" 

# "history 0 | awk '{print $2}' | sort | uniq -c | sort -n -r | head"
# what do this? ${(o)history%% *}
alias top_cmd="print -l -- ${(o)history%% *} | uniq -c | sort -nr | head -n 10"

# clipboard
alias pfile="pbpaste > "

# bat
alias batl='bat --paging=never -l log'
alias bata="bat -A"

# Global aliases (expand whatever their position)
#  e.g. find . :E :L
alias -g :F="| fzf"
alias -g :CC="| pbcopy"
alias -g :B="| bat"
alias -g :BL="| batl"
alias -g :C="| wc -l"
alias -g :G='| rg'
alias -g :H=" --help |& bat -l help"
alias -g :N='&> /dev/null'  # stdout and stderr 
alias -g :E='2> /dev/null'  # stderr 
# |& shorhand for 2>&1
# If |& is used, command's standard error, in addition to its standard output, is connected to command2's standard input through the pipe
alias -g :L='|& less'   
# read from stdin    
alias -g :-C='| code -' 
alias -g :-V='| vim -'

unglobalalias() {
    for i in ':F' ':CC' ':B' ':BL' ':C' ':G' ':H' ':N' ':E' ':L' ':-C' ':-V'; unalias $i
}

# git
alias g="git"
alias mgl="git -c color.status=always status --short | fzf --height 100% --ansi \
--preview '(git diff HEAD --color=always -- {-1} | sed 1,4d)' \
--preview-window right:65% |
cut -c4- |
sed 's/.* -> //' |
tr -d '\n'"




#
##
### Functions
##
#
function takedir() {
  mkdir -p $@ && cd ${@:$#}
}

function takegit() {
  git clone $1
  cd $(basename ${1%%.git})
}

#
## fzf path
#
function pathf() {
  fuzzy_path $PATH
}
function fpathf() {
  fuzzy_path $FPATH
}

function fuzzy_path() {
  echo $1 | tr ':' '\n' | fzf --height=100% --preview 'exa -F --group-directories-first --icons {}' --layout=reverse --info=inline --border=sharp
}


# Quick look of file
function quick-look() {
  (( $# > 0 )) && qlmanage -p $* &>/dev/null &
}


# historystat() {
#     history 0 | awk '{print $2}' | sort | uniq -c | sort -n -r | head
# }

# export FZF_COMPLETION_TRIGGER=''
# bindkey '^T' fzf-completion
# bindkey '^I' $fzf_default_completion


# fzf-man-widget() {
  
#   batman="echo {} | sed -e 's/(.*//' | xargs man | col -bx | bat --language=man --plain --color always --theme=\"Monokai Extended\""
#    man -k . | sort | uniq \
#    | awk -v cyan=$(tput setaf 6) -v blue=$(tput setaf 4) -v res=$(tput sgr0) -v bld=$(tput bold) '{ $1=cyan bld $1; $2=res blue;} 1' \
#    | fzf  \
#       -q "$1" \
#       --ansi \
#       --tiebreak=begin \
#       --prompt=' Man > '  \
#       --preview-window '50%,rounded,<50(up,85%,border-bottom)' \
#       --preview "${batman}" \
#       --bind "enter:become(${batman})" \
#       --bind "alt-c:+change-preview(echo {} | sed -e 's/(.*//' | xargs cheat)+change-prompt(ﯽ Cheat > )" \
#       --bind "alt-m:+change-preview(${batman})+change-prompt( Man > )" \
#       --bind "alt-t:+change-preview(echo {} | sed -e 's/(.*//' | xargs tldr)+change-prompt(ﳁ TLDR > )"
#   zle reset-prompt
# }
#--bind "enter:execute(echo {} | sed -e 's/(.*//' | xargs man)"

# `Ctrl-H` keybinding to launch the widget (this widget works only on zsh, don't know how to do it on bash and fish (additionaly pressing`ctrl-backspace` will trigger the widget to be executed too because both share the same keycode)
# bindkey '^h' fzf-man-widget
# zle -N fzf-man-widget

# man -k ls | sort | uniq | sed -e 's/(.*//'
# "awk '{sum+=\$1} END {print sum}' {+f}"
# awk '{gsub(/\([0-9]\)/,""); print $1;}'


# export FZF_DEFAULT_COMMAND="fd -Hi -tf --exclude '.git' --ignore-file=~/.config/ignore"

# function fzf-my-file-explorer() {
#     fzf
#     # fzf --ansi #\
#         #--query "${*}"
# }
# zle     -N            fzf-my-file-explorer
# # bindkey -M emacs '^X' fzf-my-file-explorer
# bindkey -M emacs '^X' fzf-my-file-explorer



# autoload -Uz zkbd



# draw colors palette
palette() {
  local -a colors
  for i in {000..255}; do
      colors+=("%F{$i}$i%f")
  done
  print -cP $colors
}

# Usage: printc COLOR_CODE
printc() {
    local color="%F{$1}"
    echo -E ${(qqqq)${(%)color}}
}